la verdad maestro reconozco que has hecho gran trabajo, muchas gracias, ahora los campos no dan errores ya que estan todos declarados, quiero que hagas una cosa mas, me explico, ya que las categorias cualquiera tiene mucha informacion que poner pero a veces se olvida algo que escirbir y el post no se envia al servidor, para eso quiero que hagas algo mas por mi es muy impotante ,hacer que se detecta los campos vacios y que se muestra en rojo y si es posible que al hacer click en el button se muevo el scroll a aquela parte que falta, me has entendido maestro ? te comparto el componente actualizado funional  import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useHistory, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Container, Row, Col, Card, Form, Button, Alert, Accordion } from 'react-bootstrap';

// 🔷 IMPORTAR TODOS LOS COMPONENTES COMUNES
import CategorySelector from '../components/forms/CategorySelector';
import TitleInput from '../components/forms/TitleInput';
import DescriptionTextarea from '../components/forms/DescriptionTextarea';
import AddressInput from '../components/forms/AddressInput';
import ImageUpload from '../components/forms/ImageUpload';

// 🔷 IMPORTAR TODOS LOS COMPONENTES ESPECÍFICOS DE FORMULARIOS
import Horariodesalida from '../components/forms/Horariodesalida';
import DurationInput from '../components/forms/DurationInput';
import TransportSelect from '../components/forms/TransporteViaje';
import PensionSelect from '../components/forms/PensionSelect';
import ReturnDateInput from '../components/forms/ReturnDateInput';
import PriceSlider from '../components/forms/PriceSlider';
import CancellationPolicy from '../components/forms/CancellationPolicy';
import ContactReservation from '../components/forms/ContactReservation';
import PeriodoViaje from '../components/forms/Perdiodoviajje';
import ClasificacionHotel from '../components/forms/ClasificacionHotel';

// 🔷 IMPORTAR COMPONENTES DE DESTINOS
import DestinacionExtranjera from '../components/forms/DestinacionExstranjera';
import DestinacionHadjOmra from '../components/forms/DestinacionHdjaOmra';
import DestinacionLocal from '../components/forms/DestinacionLocal';

// Importar acciones
import { createPost, updatePost } from '../redux/actions/postAction';
import communesjson from "../json/communes.json";


const Createpost = () => {
    // 🔷 ESTADOS GLOBALES 
    const { auth, theme, socket, languageReducer } = useSelector((state) => state);
    const dispatch = useDispatch();
    const history = useHistory();
    const location = useLocation();
    const { t, i18n } = useTranslation('createpost');

    const isEdit = location.state?.isEdit || false;
    const postToEdit = location.state?.postData || null;

    // 🔷 ESTADO INICIAL COMPLETO - TODOS LOS CAMPOS POSIBLES
    const initialState = {
        // 🔷 CAMPOS COMUNES A TODAS LAS CATEGORÍAS
        category: "Agence de Voyage",
        subCategory: "",
        title: "",
        description: "",
        price: "",
        wilaya: "",
        commune: "",
        contacto: "",
        images: [],

        // 🔷 CAMPOS DE VIAJE (COMPARTIDOS)
        // Fechas y horarios
        datedepar: "",
        horadudepar: "",
        horariollegada: "",
        duracionviaje: "",
        fecharegreso: "",

      

        // Precios
        prixAdulte: "",
        prixEnfant: "",
        prixBebe: "",

        // Servicios generales
        servicesInclus: [],
        activites: [],
        language: [],
        servicios: [],           // Para ClasificacionHotel
        serviciosTr: [],         // Para ClasificacionHotel  
        tipodehabutaciones: [],  // Ya lo tienes, pero asegúrate que sea array
        specifications: [],
        wifi: [],
        optionsPaiement: [],
        documentsRequises: [],
        excursions: [],
        // Tipo y categoría
        typeVoyage: "",
        niveauConfort: "",
        publicCible: "",

        // 🔷 CAMPOS ESPECÍFICOS PARA VOYAGE ORGANISÉ
        // Destinos internacionales
        destinacionvoyage1: "",
        destinacionvoyage2: "",
        paysDestination: "",


 // 🔷 CAMPOS PARA CLASIFICACION HOTEL
          // ✅ DEBE ser array  
 estrellas: "",
 nombredelhotel: "",
 
 totalhabitaciones: "",
 
 wifi: [],                // ✅ DEBE ser array
 


        // Hoteles
        voyage1hotel1: "",
        voyage1nombrehotel1: "",
        voyage2hotel2: "",
        voyage1nombrehotel2: "",
        nombredelhotel: "",
        adresshotel: "",
        estrellas: "",
        serviciosdelhotel: "",
        incluidoenelprecio: "",

        // Excursiones
        excursions: [],

        // 🔷 CAMPOS ESPECÍFICOS PARA LOCATION VACANCES
        // Características del alojamiento
        Location_Vacances: '',
        alquilergeneral: "",
        superficie: "",
        etage: "",
        promoteurimmobilier: false,
        specifications: [],
        adress: "",

        //transportevieje

        transporte: "",
        claseTransporte: "",
        companiaTransporte: "",
        numeroTransporte: "",
        itinerarioTransporte: "",
        tiempoTransporte: "",
        serviciosTransporte: [],  // 🔷 ARRAY VACÍO
        comentariosTransporte: "",


        // Capacidad
        capacitePersonnes: "",
        nombreChambres: "",
        nombreSallesBain: "",

        // Equipamientos
    
        wifiGratuit: false,
        climatisation: false,
        cuisineEquipee: false,
        television: false,
        piscine: false,
        parking: false,
        animauxAcceptes: false,
        menageInclus: false,

        // Check-in/out
        checkInTime: "",
        checkOutTime: "",

        // Tarifas
        tarifnuit: "",
        reservacionenlinea: "",

        // Pago
        optionsPaiement: [],
        acompteRequise: false,
        pourcentageAcompte: "",

        // 🔷 CAMPOS ESPECÍFICOS PARA HAJJ & OMRA
        // Destinos sagrados
        destinacionhadj: "",

        // Servicios religiosos
        guideLocal: false,
        repasInclus: false,
        transfertAeroport: false,

        // Documentación
        documentsRequises: [],
        delaiTraitement: "",
        formalites: "",
        assurancesIncluses: false,

        // 🔷 POLÍTICAS Y CONTACTO (COMPARTIDOS)
        cancelarreserva: "",
        conditionsAnnulation: "",
        politiqueAnnulation: "",
        hotelWebsite: "",
        itemsReservations_Visa: "",
  
        tipodehabutaciones: [],
    };

    // 🔷 ESTADOS
    const [postData, setPostData] = useState(initialState);
    const [images, setImages] = useState([]);
    const [selectedWilaya, setSelectedWilaya] = useState("");
    const [showAlert, setShowAlert] = useState(false);
    const [alertMessage, setAlertMessage] = useState("");
    const [alertVariant, setAlertVariant] = useState("info");
    const [activeAccordion, setActiveAccordion] = useState(['0']);

    // 🔷 EFFECT PARA CAMBIO DE IDIOMA
    useEffect(() => {
        const lang = languageReducer?.language || 'fr';
        if (i18n.language !== lang) {
            i18n.changeLanguage(lang);
        }
    }, [languageReducer?.language, i18n]);

    // 🔷 EFFECT PARA CARGAR DATOS DE EDICIÓN
    // 🔷 AGREGA ESTA FUNCIÓN EN TU useEffect DE EDICIÓN
 // Createpost.js - EN el useEffect de edición, AGREGA saneamiento
useEffect(() => {
    if (isEdit && postToEdit) {
        // 🔷 FUNCIÓN DE SANEAMIENTO MEJORADA
        const sanitizePostData = (data) => {
            const arrayFields = [
                'servicesInclus', 'activites', 'language', 'servicios', 'serviciosTr',
                'specifications', 'wifi', 'optionsPaiement', 'documentsRequises', 
                'excursions', 'tipodehabutaciones', 'serviciosTransporte' // ✅ NUEVO
            ];
            
            const sanitizedData = { ...data };
            
            arrayFields.forEach(field => {
                if (sanitizedData[field] && !Array.isArray(sanitizedData[field])) {
                    sanitizedData[field] = [sanitizedData[field]];
                } else if (!sanitizedData[field]) {
                    sanitizedData[field] = [];
                }
            });
            
            return sanitizedData;
        };

        setPostData({
            ...initialState,
            ...sanitizePostData(postToEdit), // ✅ USA SANEAMIENTO
            category: postToEdit.category || "Agence de Voyage",
            subCategory: postToEdit.subCategory || "",
            description: postToEdit.description || postToEdit.content || "",
            title: postToEdit.title || "",
        });

        // ... manejo de imágenes ...
    } else {
        setPostData(initialState);
        setImages([]);
        setSelectedWilaya("");
    }
}, [isEdit, postToEdit]);

    // 🔷 HANDLERS PARA EL FORMULARIO
    const handleChangeInput = (e) => {
        const { name, value, type, checked } = e.target;
        setPostData(prevState => ({
            ...prevState,
            [name]: type === "checkbox" ? checked : value
        }));
    };

    // Handler para arrays (servicios, activites, etc.)
    const handleArrayChange = (field, value, isChecked) => {
        setPostData(prevState => {
            const currentArray = prevState[field] || [];
            let newArray;

            if (isChecked) {
                newArray = [...currentArray, value];
            } else {
                newArray = currentArray.filter(item => item !== value);
            }

            return {
                ...prevState,
                [field]: newArray
            };
        });
    };

    const handleWilayaChange = (event) => {
        const selectedWilaya = event.target.value;
        setSelectedWilaya(selectedWilaya);
        const wilayaEncontrada = communesjson.find((wilaya) => wilaya.wilaya === selectedWilaya);
        const communes = wilayaEncontrada ? wilayaEncontrada.commune : [];

        setPostData((prevState) => ({
            ...prevState,
            wilaya: selectedWilaya,
            commune: communes.length > 0 ? communes[0] : "",
        }));
    };

    const handleCommuneChange = (event) => {
        const selectedCommune = event.target.value;
        setPostData((prevState) => ({
            ...prevState,
            commune: selectedCommune,
        }));
    };

    // 🔷 HANDLER PARA MANEJAR IMÁGENES
    const handleChangeImages = (e) => {
        const files = [...e.target.files];
        let err = "";
        let newImages = [];

        files.forEach(file => {
            if (!file) return err = t('validation_images_required');
            if (file.size > 1024 * 1024 * 5) {
                return err = "La taille de l'image/vidéo ne doit pas dépasser 5mb.";
            }
            return newImages.push(file);
        });

        if (err) {
            setAlertMessage(err);
            setAlertVariant("danger");
            setShowAlert(true);
            return;
        }

        setImages([...images, ...newImages]);
    };

    // 🔷 HANDLER PARA ELIMINAR IMÁGENES
    const deleteImages = (index) => {
        const newArr = [...images];
        newArr.splice(index, 1);
        setImages(newArr);
    };

    // 🔷 HANDLER SUBMIT MEJORADO
    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validaciones
        if (!postData.subCategory) {
            setAlertMessage(t('validation_category_required'));
            setAlertVariant("danger");
            setShowAlert(true);
            return;
        }

        if (!postData.wilaya || !postData.commune) {
            setAlertMessage(t('validation_wilaya_required'));
            setAlertVariant("danger");
            setShowAlert(true);
            return;
        }

        if (images.length === 0) {
            setAlertMessage(t('validation_images_required'));
            setAlertVariant("danger");
            setShowAlert(true);
            return;
        }

        try {
            if (isEdit && postToEdit) {
                const status = {
                    _id: postToEdit._id,
                    ...postToEdit
                };

                await dispatch(updatePost({
                    postData,
                    images,
                    auth,
                    status
                }));

                setAlertMessage(t('success_update'));
                setAlertVariant("success");
            } else {
                await dispatch(createPost({
                    postData,
                    images,
                    auth,
                    socket
                }));

                setAlertMessage(t('success_create'));
                setAlertVariant("success");
            }

            setShowAlert(true);

            setTimeout(() => {
                history.push('/');
            }, 2000);

        } catch (error) {
            setAlertMessage(t('error_publication'));
            setAlertVariant("danger");
            setShowAlert(true);
        }
    };

    // 🔷 HANDLER CANCELAR
    const handleCancel = () => {
        history.goBack();
    };

    // 🔷 🧳 FUNCIÓN COMPLETA PARA VOYAGE ORGANISÉ
    const renderVoyageOrganise = () => (
        <>
            <Accordion activeKey={activeAccordion} onSelect={setActiveAccordion} className="mb-3">

                {/* Destinos Internacionales */}
                <Accordion.Item eventKey="0">
                    <Accordion.Header>
                        <i className="fas fa-map-marked-alt me-2 text-primary"></i>
                        🗺️ Destinations Internationales
                    </Accordion.Header>
                    <Accordion.Body>
                        <DestinacionExtranjera
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Fechas y Duración */}
                <Accordion.Item eventKey="1">
                    <Accordion.Header>
                        <i className="fas fa-calendar-alt me-2 text-success"></i>
                        📅 Dates et Durée du Voyage
                    </Accordion.Header>
                    <Accordion.Body>
                        <Horariodesalida
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <DurationInput
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <ReturnDateInput
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <PeriodoViaje
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Transporte */}
                <Accordion.Item eventKey="2">
                    <Accordion.Header>
                        <i className="fas fa-plane me-2 text-info"></i>
                        ✈️ Transport et Déplacements
                    </Accordion.Header>
                    <Accordion.Body>
                        <TransportSelect
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Hébergement et Pension */}
                <Accordion.Item eventKey="3">
                    <Accordion.Header>
                        <i className="fas fa-hotel me-2 text-warning"></i>
                        🏨 Hébergement et Pension
                    </Accordion.Header>
                    <Accordion.Body>
                        <ClasificacionHotel
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <PensionSelect
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Activités et Services */}
                <Accordion.Item eventKey="4">
                    <Accordion.Header>
                        <i className="fas fa-hiking me-2 text-primary"></i>
                        🎯 Activités et Services Inclus
                    </Accordion.Header>
                    <Accordion.Body>
                        <Form.Group>
                            <Form.Label>Services Inclus dans le Package</Form.Label>
                            <div className="d-flex flex-wrap gap-3">
                                {['visite_guidee', 'repas', 'transfert', 'assistance', 'assurance'].map(service => (
                                    <Form.Check
                                        key={service}
                                        type="checkbox"
                                        label={t(`service_${service}`) || service}
                                        checked={postData.servicesInclus?.includes(service) || false}
                                        onChange={(e) => handleArrayChange('servicesInclus', service, e.target.checked)}
                                    />
                                ))}
                            </div>
                        </Form.Group>

                        <Form.Group className="mt-3">
                            <Form.Label>Activités Proposées</Form.Label>
                            <div className="d-flex flex-wrap gap-3">
                                {['excursion', 'plongee', 'randonnee', 'shopping', 'culture'].map(activite => (
                                    <Form.Check
                                        key={activite}
                                        type="checkbox"
                                        label={t(`activite_${activite}`) || activite}
                                        checked={postData.activites?.includes(activite) || false}
                                        onChange={(e) => handleArrayChange('activites', activite, e.target.checked)}
                                    />
                                ))}
                            </div>
                        </Form.Group>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Prix et Conditions */}
                <Accordion.Item eventKey="5">
                    <Accordion.Header>
                        <i className="fas fa-euro-sign me-2 text-success"></i>
                        💰 Tarifs et Conditions
                    </Accordion.Header>
                    <Accordion.Body>
                        <PriceSlider
                            postData={postData}
                            setPostData={setPostData}
                        />

                        <Row className="g-3 mt-3">
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Adulte</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixAdulte"
                                        value={postData.prixAdulte || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par adulte"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Enfant</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixEnfant"
                                        value={postData.prixEnfant || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par enfant"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Bébé</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixBebe"
                                        value={postData.prixBebe || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par bébé"
                                    />
                                </Form.Group>
                            </Col>
                        </Row>

                        <CancellationPolicy
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

            </Accordion>

            <ContactReservation
                postData={postData}
                handleChangeInput={handleChangeInput}
            />
        </>
    );

    // 🔷 🏠 FUNCIÓN COMPLETA PARA LOCATION VACANCES
    const renderLocationVacances = () => (
        <>
            <Accordion activeKey={activeAccordion} onSelect={setActiveAccordion} className="mb-3">

                {/* Informations du Logement */}
                <Accordion.Item eventKey="0">
                    <Accordion.Header>
                        <i className="fas fa-home me-2 text-primary"></i>
                        🏠 Informations du Logement
                    </Accordion.Header>
                    <Accordion.Body>
                        <DestinacionLocal
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <ClasificacionHotel
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />

                        <Row className="g-3 mt-3">
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Superficie (m²)</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="superficie"
                                        value={postData.superficie || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Surface en m²"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Étage</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="etage"
                                        value={postData.etage || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Numéro d'étage"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Capacité (personnes)</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="capacitePersonnes"
                                        value={postData.capacitePersonnes || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Nombre de personnes"
                                    />
                                </Form.Group>
                            </Col>
                        </Row>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Équipements et Services */}
                <Accordion.Item eventKey="1">
                    <Accordion.Header>
                        <i className="fas fa-tv me-2 text-success"></i>
                        📺 Équipements et Services
                    </Accordion.Header>
                    <Accordion.Body>
                        <Row>
                            <Col md={6}>
                                <Form.Check
                                    type="checkbox"
                                    name="wifiGratuit"
                                    label="WiFi Gratuit"
                                    checked={postData.wifiGratuit || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="climatisation"
                                    label="Climatisation"
                                    checked={postData.climatisation || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="cuisineEquipee"
                                    label="Cuisine Équipée"
                                    checked={postData.cuisineEquipee || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="television"
                                    label="Télévision"
                                    checked={postData.television || false}
                                    onChange={handleChangeInput}
                                />
                            </Col>
                            <Col md={6}>
                                <Form.Check
                                    type="checkbox"
                                    name="piscine"
                                    label="Piscine"
                                    checked={postData.piscine || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="parking"
                                    label="Parking"
                                    checked={postData.parking || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="animauxAcceptes"
                                    label="Animaux Acceptés"
                                    checked={postData.animauxAcceptes || false}
                                    onChange={handleChangeInput}
                                />
                                <Form.Check
                                    type="checkbox"
                                    name="menageInclus"
                                    label="Ménage Inclus"
                                    checked={postData.menageInclus || false}
                                    onChange={handleChangeInput}
                                />
                            </Col>
                        </Row>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Chambres et Salles de Bain */}
                <Accordion.Item eventKey="2">
                    <Accordion.Header>
                        <i className="fas fa-bed me-2 text-info"></i>
                        🛏️ Chambres et Salles de Bain
                    </Accordion.Header>
                    <Accordion.Body>
                        <Row className="g-3">
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Nombre de Chambres</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="nombreChambres"
                                        value={postData.nombreChambres || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Nombre de chambres"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Nombre de Salles de Bain</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="nombreSallesBain"
                                        value={postData.nombreSallesBain || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Nombre de salles de bain"
                                    />
                                </Form.Group>
                            </Col>
                        </Row>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Disponibilité et Tarifs */}
                <Accordion.Item eventKey="3">
                    <Accordion.Header>
                        <i className="fas fa-calendar-check me-2 text-warning"></i>
                        📅 Disponibilité et Tarifs
                    </Accordion.Header>
                    <Accordion.Body>
                        <PeriodoViaje
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />

                        <Row className="g-3 mt-3">
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Check-in</Form.Label>
                                    <Form.Control
                                        type="time"
                                        name="checkInTime"
                                        value={postData.checkInTime || ''}
                                        onChange={handleChangeInput}
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Check-out</Form.Label>
                                    <Form.Control
                                        type="time"
                                        name="checkOutTime"
                                        value={postData.checkOutTime || ''}
                                        onChange={handleChangeInput}
                                    />
                                </Form.Group>
                            </Col>
                        </Row>

                        <PriceSlider
                            postData={postData}
                            setPostData={setPostData}
                        />

                        <Form.Group className="mt-3">
                            <Form.Label>Tarif par Nuit (€)</Form.Label>
                            <Form.Control
                                type="number"
                                name="tarifnuit"
                                value={postData.tarifnuit || ''}
                                onChange={handleChangeInput}
                                placeholder="Prix par nuit"
                            />
                        </Form.Group>

                        <CancellationPolicy
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

            </Accordion>

            <ContactReservation
                postData={postData}
                handleChangeInput={handleChangeInput}
            />
        </>
    );

    // 🔷 🕋 FUNCIÓN COMPLETA PARA HAJJ & OMRA
    const renderHadjOmra = () => (
        <>
            <Accordion activeKey={activeAccordion} onSelect={setActiveAccordion} className="mb-3">

                {/* Destination du Pèlerinage */}
                <Accordion.Item eventKey="0">
                    <Accordion.Header>
                        <i className="fas fa-kaaba me-2 text-primary"></i>
                        🕋 Destination du Pèlerinage
                    </Accordion.Header>
                    <Accordion.Body>
                        <DestinacionHadjOmra
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                            destinationNumber={1}
                        />

                        <Row className="g-3 mt-3">
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Type de Pèlerinage</Form.Label>
                                    <Form.Select
                                        name="typeVoyage"
                                        value={postData.typeVoyage || ''}
                                        onChange={handleChangeInput}
                                    >
                                        <option value="">Sélectionnez le type</option>
                                        <option value="hadj">Hadj</option>
                                        <option value="omra">Omra</option>
                                        <option value="hadj_omra">Hadj & Omra</option>
                                    </Form.Select>
                                </Form.Group>
                            </Col>
                            <Col md={6}>
                                <Form.Group>
                                    <Form.Label>Niveau de Confort</Form.Label>
                                    <Form.Select
                                        name="niveauConfort"
                                        value={postData.niveauConfort || ''}
                                        onChange={handleChangeInput}
                                    >
                                        <option value="">Sélectionnez le confort</option>
                                        <option value="economique">Économique</option>
                                        <option value="standard">Standard</option>
                                        <option value="confort">Confort</option>
                                        <option value="luxe">Luxe</option>
                                    </Form.Select>
                                </Form.Group>
                            </Col>
                        </Row>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Dates du Pèlerinage */}
                <Accordion.Item eventKey="1">
                    <Accordion.Header>
                        <i className="fas fa-calendar-alt me-2 text-success"></i>
                        📅 Dates du Pèlerinage
                    </Accordion.Header>
                    <Accordion.Body>
                        <Horariodesalida
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <DurationInput
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <ReturnDateInput
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <PeriodoViaje
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Transport et Hébergement */}
                <Accordion.Item eventKey="2">
                    <Accordion.Header>
                        <i className="fas fa-hotel me-2 text-info"></i>
                        🏨 Transport et Hébergement
                    </Accordion.Header>
                    <Accordion.Body>
                        <TransportSelect
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <ClasificacionHotel
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                        <PensionSelect
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

                {/* Services Spirituels */}
                <Accordion.Item eventKey="3">
                    <Accordion.Header>
                        <i className="fas fa-book-quran me-2 text-warning"></i>
                        📖 Services Spirituels
                    </Accordion.Header>
                    <Accordion.Body>
                        <Form.Group>
                            <Form.Label>Services Religieux Inclus</Form.Label>
                            <div className="d-flex flex-wrap gap-3">
                                {['guide_religieux', 'cours_rituels', 'assistance_ihram', 'groupe_etude', 'prieres_collectives'].map(service => (
                                    <Form.Check
                                        key={service}
                                        type="checkbox"
                                        label={t(`service_${service}`) || service}
                                        checked={postData.servicesInclus?.includes(service) || false}
                                        onChange={(e) => handleArrayChange('servicesInclus', service, e.target.checked)}
                                    />
                                ))}
                            </div>
                        </Form.Group>

                        <Form.Group className="mt-3">
                            <Form.Label>Langue du Guide</Form.Label>
                            <div className="d-flex flex-wrap gap-3">
                                {['arabe', 'francais', 'anglais', 'berbere'].map(langue => (
                                    <Form.Check
                                        key={langue}
                                        type="checkbox"
                                        label={t(`langue_${langue}`) || langue}
                                        checked={postData.language?.includes(langue) || false}
                                        onChange={(e) => handleArrayChange('language', langue, e.target.checked)}
                                    />
                                ))}
                            </div>
                        </Form.Group>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Documents Requis */}
                <Accordion.Item eventKey="4">
                    <Accordion.Header>
                        <i className="fas fa-passport me-2 text-danger"></i>
                        📋 Documents Requis
                    </Accordion.Header>
                    <Accordion.Body>
                        <Form.Group>
                            <Form.Label>Documents Nécessaires</Form.Label>
                            <div className="d-flex flex-wrap gap-3">
                                {['passeport', 'photos_identite', 'certificat_vaccination', 'reservation_hotel', 'billet_avion'].map(doc => (
                                    <Form.Check
                                        key={doc}
                                        type="checkbox"
                                        label={t(`document_${doc}`) || doc}
                                        checked={postData.documentsRequises?.includes(doc) || false}
                                        onChange={(e) => handleArrayChange('documentsRequises', doc, e.target.checked)}
                                    />
                                ))}
                            </div>
                        </Form.Group>
                    </Accordion.Body>
                </Accordion.Item>

                {/* Prix et Conditions */}
                <Accordion.Item eventKey="5">
                    <Accordion.Header>
                        <i className="fas fa-euro-sign me-2 text-success"></i>
                        💰 Prix et Conditions
                    </Accordion.Header>
                    <Accordion.Body>
                        <PriceSlider
                            postData={postData}
                            setPostData={setPostData}
                        />

                        <Row className="g-3 mt-3">
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Adulte</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixAdulte"
                                        value={postData.prixAdulte || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par adulte"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Enfant</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixEnfant"
                                        value={postData.prixEnfant || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par enfant"
                                    />
                                </Form.Group>
                            </Col>
                            <Col md={4}>
                                <Form.Group>
                                    <Form.Label>Prix Bébé</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="prixBebe"
                                        value={postData.prixBebe || ''}
                                        onChange={handleChangeInput}
                                        placeholder="Prix par bébé"
                                    />
                                </Form.Group>
                            </Col>
                        </Row>

                        <CancellationPolicy
                            postData={postData}
                            handleChangeInput={handleChangeInput}
                        />
                    </Accordion.Body>
                </Accordion.Item>

            </Accordion>

            <ContactReservation
                postData={postData}
                handleChangeInput={handleChangeInput}
            />
        </>
    );

    // 🔷 RENDERIZADO DINÁMICO SEGÚN CATEGORÍA
    const renderCategoryFields = () => {
        switch (postData.subCategory) {
            case "Voyage_Organise":
                return renderVoyageOrganise();
            case "Location_Vacances":
                return renderLocationVacances();
            case "hadj_Omra":
                return renderHadjOmra();
            default:
                return (
                    <Alert variant="warning" className="mb-4">
                        <h5>📋 Sélectionnez une catégorie</h5>
                        <p className="mb-0">Choisissez entre Voyage Organisé, Location Vacances ou Hadj & Omra</p>
                    </Alert>
                );
        }
    };

    // 🔷 OPCIONES PARA WILAYAS Y COMMUNES
    const wilayasOptions = communesjson.map((wilaya, index) => (
        <option key={index} value={wilaya.wilaya}>
            {wilaya.wilaya}
        </option>
    ));

    const communesOptions = selectedWilaya
        ? communesjson
            .find((wilaya) => wilaya.wilaya === selectedWilaya)
            ?.commune?.map((commune, index) => (
                <option key={index} value={commune}>
                    {commune}
                </option>
            ))
        : [];

    // 🔷 RETURN PRINCIPAL
    return (
        <Container className="my-4">
            <Row className="justify-content-center">
                <Col lg={10}>
                    <Card>
                        <Card.Header className={isEdit ? "bg-warning text-dark" : "bg-primary text-white"}>
                            <h4 className="mb-0">
                                {isEdit ? `✏️ ${t('edit_title')}` : `📢 ${t('create_title')}`}
                            </h4>
                            {isEdit && postToEdit?.title && (
                                <small>{t('modification')}: "{postToEdit.title}"</small>
                            )}
                        </Card.Header>
                        <Card.Body>
                            {showAlert && (
                                <Alert
                                    variant={alertVariant}
                                    dismissible
                                    onClose={() => setShowAlert(false)}
                                    className="mb-4"
                                >
                                    {alertMessage}
                                </Alert>
                            )}

                            <Form onSubmit={handleSubmit}>

                                {/* Selector de Categoría */}
                                <CategorySelector
                                    postData={postData}
                                    handleChangeInput={handleChangeInput}
                                    t={t}
                                />

                                {/* Campos comunes a todas las categorías */}
                                {postData.subCategory && (
                                    <>
                                        <TitleInput
                                            postData={postData}
                                            handleChangeInput={handleChangeInput}
                                            t={t}
                                        />
                                        <DescriptionTextarea
                                            postData={postData}
                                            handleChangeInput={handleChangeInput}
                                            t={t}
                                        />
                                        <AddressInput
                                            postData={postData}
                                            handleChangeInput={handleChangeInput}
                                            wilayasOptions={wilayasOptions}
                                            communesOptions={communesOptions}
                                            handleWilayaChange={handleWilayaChange}
                                            handleCommuneChange={handleCommuneChange}
                                            t={t}
                                        />
                                    </>
                                )}

                                {/* Campos dinámicos según categoría */}
                                {renderCategoryFields()}

                                {/* Componente de imágenes */}
                                <ImageUpload
                                    images={images}
                                    handleChangeImages={handleChangeImages}
                                    deleteImages={deleteImages}
                                    theme={theme}
                                    t={t}
                                />

                                {/* Botones */}
                                <div className="d-flex gap-2 mt-4">
                                    <Button
                                        variant={isEdit ? "warning" : "success"}
                                        type="submit"
                                        size="lg"
                                        className="flex-fill"
                                    >
                                        {isEdit ? `💾 ${t('button_update')}` : `📢 ${t('button_publish')}`}
                                    </Button>

                                    <Button
                                        variant="secondary"
                                        type="button"
                                        size="lg"
                                        onClick={handleCancel}
                                    >
                                        ❌ {t('button_cancel')}
                                    </Button>
                                </div>
                            </Form>
                        </Card.Body>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
};

export default Createpost;
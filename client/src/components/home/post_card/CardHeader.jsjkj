import React, { useState } from 'react';
import { Card, Dropdown, Modal, Form, Alert, Button } from 'react-bootstrap';
import {   useHistory } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { useTranslation } from 'react-i18next';
 
import { CopyToClipboard } from 'react-copy-to-clipboard';

// React Share imports
import {
  FacebookShareButton,
  TwitterShareButton,
  WhatsappShareButton,
  TelegramShareButton,
  EmailShareButton,
  FacebookIcon,
  TwitterIcon,
  WhatsappIcon,
  TelegramIcon,
  EmailIcon,
  PinterestShareButton,
  PinterestIcon
} from 'react-share';

import { GLOBALTYPES } from '../../../redux/actions/globalTypes';
import { MESS_TYPES } from '../../../redux/actions/messageAction';
import { deletePost } from '../../../redux/actions/postAction';
import { aprovarPostPendiente } from '../../../redux/actions/postAproveAction';
import { createReport } from '../../../redux/actions/reportUserAction';
import FollowBtn from '../../FollowBtn';

// Importar los modales
import AuthModal from '../../authAndVerify/AuthModal';
import VerifyModal from '../../authAndVerify/VerifyModal';
import DesactivateModal from '../../authAndVerify/DesactivateModal';

const CardHeader = ({ post }) => {
  const { auth, homeUsers, socket, languageReducer, profile } = useSelector((state) => state);
  const [showReportModal, setShowReportModal] = useState(false);
  const [showShareModal, setShowShareModal] = useState(false);
  const [reportReason, setReportReason] = useState('');
  const [copied, setCopied] = useState(false);

  // Estados para los modales de verificación
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [showVerifyModal, setShowVerifyModal] = useState(false);
  const [showDeactivatedModal, setShowDeactivatedModal] = useState(false);

  const dispatch = useDispatch();
  const history = useHistory();
  const { t, i18n } = useTranslation('cardheader');

 
  const canProceed = () => {
    if (!auth.token || !auth.user) {
      setShowAuthModal(true);
      return false;
    }
/*
    if (!auth.user.isVerified) {
      setShowVerifyModal(true);
      return false;
    }*/

    if (auth.user.isActive === false) {
      setShowDeactivatedModal(true);
      return false;
    }

    return true;
  };

  const findCompleteUser = () => {
    const completeUser = profile.users.find(u => u._id === post.user._id);
    return completeUser || post.user;
  };

  const user = findCompleteUser();
  const lang = languageReducer.language || 'es';
  if (i18n.language !== lang) i18n.changeLanguage(lang);

  // URL y texto para compartir
  const shareUrl = `${window.location.origin}/post/${post._id}`;
  const shareTitle = `🎨 Obra de arte por ${post.user.username}: "${post.content?.substring(0, 80)}..." - Mira más en Tassili Art`;
  const imageUrl = post.images?.[0]?.url || post.user.avatar;

 

  const adminUser = homeUsers.users.find(user => user.role === "admin");

  const handleChatWithAdmin = () => {
    
    if (!adminUser) {
      return dispatch({
        type: GLOBALTYPES.ALERT,
        payload: { error: t('noAdminAvailable') }
      });
    }
    handleAddUser(adminUser);
  };

  const handleEditPost = () => {
   // if (!canProceed()) return;
   history.push(`/editpost/${post._id}`)
  };

  const handleDeletePost = () => {
   
    if (window.confirm(t('confirmDelete'))) {
      dispatch(deletePost({ post, auth, socket }));
      history.push("/");
    }
  };

  const handleSubmitReport = () => {
   
    if (!reportReason.trim()) {
      return dispatch({
        type: GLOBALTYPES.ALERT,
        payload: { error: t('reportRequired') }
      });
    }

    const reportData = {
      postId: post._id,
      userId: post.user._id,
      reason: reportReason,
    };

    dispatch(createReport({ auth, reportData }));
    setShowReportModal(false);
    setReportReason('');
    dispatch({
      type: GLOBALTYPES.ALERT,
      payload: { success: t('reportSubmitted') }
    });
  };

  const handleAddUser = (user) => {
   
    dispatch({ type: MESS_TYPES.ADD_USER, payload: { ...user, text: '', media: [] } });
    return history.push(`/message/${user._id}`);
  };

  const handleShare = () => {
    setShowShareModal(true);
  };

  const handleContactSeller = () => {
 
    handleAddUser(post.user);
  };

  const handleCopy = (message) => {
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
    dispatch({
      type: GLOBALTYPES.ALERT,
      payload: { success: message }
    });
  };

  return (
    <>
      <Card.Header className="d-flex justify-content-between align-items-center p-3">
        <div className='mt-0'></div>

        {auth.user && (
          <Dropdown align="end">
            <Dropdown.Toggle variant="light" id="dropdown-actions" className="p-0 border-0">
              <span className="material-icons">more_horiz</span>
            </Dropdown.Toggle>

            <Dropdown.Menu
              style={{
                direction: lang === 'ar' ? 'rtl' : 'ltr',
                textAlign: lang === 'ar' ? 'right' : 'left',
              }}
            >
              {auth.user.role === 'admin' && (
                <>
                 
                  <Dropdown.Item onClick={handleEditPost}>
                    ✏️ {t('edit')}hhhhhhhhhhhhhh
                  </Dropdown.Item>
                  <Dropdown.Item onClick={handleDeletePost}>
                    🗑️ {t('delete')}
                  </Dropdown.Item>
                  <Dropdown.Divider />
                </>
              )}

              {auth.user._id === post.user._id && (
                <>
                  <Dropdown.Item onClick={handleEditPost}>
                    ✏️ {t('edit')}
                  </Dropdown.Item>
                  <Dropdown.Item onClick={handleDeletePost}>
                    🗑️ {t('delete')}
                  </Dropdown.Item>
                  <Dropdown.Divider />
                </>
              )}

              <Dropdown.Item onClick={handleContactSeller}>
                💬 {t('contactSeller')}
              </Dropdown.Item>

              <Dropdown.Item onClick={handleChatWithAdmin}>
                🛡️ {t('contactAdmin')}
              </Dropdown.Item>

              {auth.user._id !== user._id && (
                <>
                  <Dropdown.Divider />
                  <Dropdown.Item
                    as="div"
                    className="p-2"
                    style={{ cursor: 'default' }}
                    onClick={(e) => e.stopPropagation()}
                  >
                    <div className="d-flex align-items-center">
                      <span className="me-2">👤</span>
                      <FollowBtn user={user} />
                    </div>
                  </Dropdown.Item>
                </>
              )}

              <Dropdown.Divider />

              <Dropdown.Item onClick={handleShare}>
                📤 {t('share')}
              </Dropdown.Item>

              <Dropdown.Item onClick={() => {
        
                setShowReportModal(true);
              }}>
                🚩 {t('report')}
              </Dropdown.Item>

              <Dropdown.Item>
                🔖 {t('save')}
              </Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        )}
      </Card.Header>

      {/* Modal para Compartir */}
      <Modal 
        show={showShareModal} 
        onHide={() => setShowShareModal(false)} 
        centered 
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>🎨 {t('shareArt')}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {copied && (
            <Alert variant="success" className="py-2" dismissible onClose={() => setCopied(false)}>
              ✅ {t('copiedToClipboard')}
            </Alert>
          )}

          <h6 className="mb-3">{t('shareOnSocial')}</h6>
          <div className="d-flex justify-content-around flex-wrap mb-4">
            <FacebookShareButton url={shareUrl} quote={shareTitle} className="mx-2 my-2">
              <FacebookIcon size={45} round />
              <div className="small mt-1 text-center">Facebook</div>
            </FacebookShareButton>

            <TwitterShareButton url={shareUrl} title={shareTitle} className="mx-2 my-2">
              <TwitterIcon size={45} round />
              <div className="small mt-1 text-center">Twitter</div>
            </TwitterShareButton>

            <WhatsappShareButton url={shareUrl} title={shareTitle} className="mx-2 my-2">
              <WhatsappIcon size={45} round />
              <div className="small mt-1 text-center">WhatsApp</div>
            </WhatsappShareButton>

            {imageUrl && (
              <PinterestShareButton
                url={shareUrl}
                media={imageUrl}
                description={shareTitle}
                className="mx-2 my-2"
              >
                <PinterestIcon size={45} round />
                <div className="small mt-1 text-center">Pinterest</div>
              </PinterestShareButton>
            )}

            <div 
              className="mx-2 my-2 text-center" 
              style={{ cursor: 'pointer' }}
              onClick={() => {
                navigator.clipboard.writeText(shareTitle);
                handleCopy(t('copiedForTikTok'));
              }}
            >
              <div style={{
                width: 45,
                height: 45,
                borderRadius: '50%',
                background: '#000',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto'
              }}>
                <span style={{ color: '#fff', fontWeight: 'bold' }}>TK</span>
              </div>
              <div className="small mt-1">TikTok</div>
            </div>

            <div 
              className="mx-2 my-2 text-center" 
              style={{ cursor: 'pointer' }}
              onClick={() => {
                navigator.clipboard.writeText(shareTitle);
                handleCopy(t('copiedForInstagram'));
              }}
            >
              <div style={{
                width: 45,
                height: 45,
                borderRadius: '50%',
                background: 'linear-gradient(45deg, #f09433, #e6683c, #dc2743, #cc2366, #bc1888)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto'
              }}>
                <span style={{ color: '#fff', fontWeight: 'bold' }}>IG</span>
              </div>
              <div className="small mt-1">Instagram</div>
            </div>

            <TelegramShareButton url={shareUrl} title={shareTitle} className="mx-2 my-2">
              <TelegramIcon size={45} round />
              <div className="small mt-1 text-center">Telegram</div>
            </TelegramShareButton>

            <EmailShareButton url={shareUrl} subject={t('artWork')} body={shareTitle} className="mx-2 my-2">
              <EmailIcon size={45} round />
              <div className="small mt-1 text-center">Email</div>
            </EmailShareButton>
          </div>

          <h6 className="mb-3">{t('manualShare')}</h6>
          <Form.Group className="mb-3">
            <Form.Label>{t('copyTextForSocial')}</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={shareTitle}
              readOnly
              className="mb-2"
            />
            <CopyToClipboard
              text={shareTitle}
              onCopy={() => handleCopy(t('textCopied'))}
            >
              <Button variant="outline-primary" size="sm">
                📋 {t('copyText')}
              </Button>
            </CopyToClipboard>
          </Form.Group>

          <Form.Group>
            <Form.Label>{t('copyLink')}</Form.Label>
            <div className="input-group">
              <Form.Control
                type="text"
                value={shareUrl}
                readOnly
              />
              <CopyToClipboard
                text={shareUrl}
                onCopy={() => handleCopy(t('linkCopied'))}
              >
                <Button variant="outline-secondary" type="button">
                  📋
                </Button>
              </CopyToClipboard>
            </div>
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowShareModal(false)}>
            {t('close')}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal de Reporte */}
      <Modal show={showReportModal} onHide={() => setShowReportModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>{t('reportTitle')}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group controlId="reportReason">
            <Form.Label>{t('reportLabel')}</Form.Label>
            <Form.Select
              value={reportReason}
              onChange={(e) => setReportReason(e.target.value)}
              style={{
                direction: lang === 'ar' ? 'rtl' : 'ltr',
                textAlign: lang === 'ar' ? 'right' : 'left',
              }}
            >
              <option value="">{t('selectReason')}</option>
              <option value="abuse">{t('reasons.abuse')}</option>
              <option value="spam">{t('reasons.spam')}</option>
              <option value="terms">{t('reasons.terms')}</option>
              <option value="offensive">{t('reasons.offensive')}</option>
              <option value="fraud">{t('reasons.fraud')}</option>
              <option value="impersonation">{t('reasons.impersonation')}</option>
              <option value="inappropriate">{t('reasons.inappropriate')}</option>
              <option value="privacy">{t('reasons.privacy')}</option>
              <option value="disruption">{t('reasons.disruption')}</option>
              <option value="suspicious">{t('reasons.suspicious')}</option>
              <option value="other">{t('reasons.other')}</option>
            </Form.Select>
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => {
              setShowReportModal(false);
              setReportReason('');
            }}
          >
            {t('cancel')}
          </Button>
          <Button
            variant="danger"
            disabled={!reportReason}
            onClick={handleSubmitReport}
          >
            {t('submitReport')}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modales de verificación */}
      <AuthModal
        show={showAuthModal}
        onClose={() => setShowAuthModal(false)}
      />
      <VerifyModal
        show={showVerifyModal}
        onClose={() => setShowVerifyModal(false)}
      />
      <DesactivateModal
        show={showDeactivatedModal}
        onClose={() => setShowDeactivatedModal(false)}
      />
    </>
  );
};

export default CardHeader;
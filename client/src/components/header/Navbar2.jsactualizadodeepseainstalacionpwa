import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useTranslation } from 'react-i18next';
import { Link, useHistory } from 'react-router-dom';
import Avatar from '../Avatar';
import Card from 'react-bootstrap/Card';
import {
  FaPlus,
  FaHome,
  FaUserCircle,
  FaSignInAlt,
  FaUserPlus,
  FaBell,
  FaInfoCircle,
  FaFacebookMessenger,
  FaDownload,
  FaRocket,
  FaUserCog,
  FaUsers,
  FaCheckCircle, // ‚úÖ Nuevo icono para cuando est√° instalado
  FaMobileAlt    // ‚úÖ Icono alternativo
} from 'react-icons/fa';
import { Navbar, Container, NavDropdown, Badge, Alert, Tooltip, OverlayTrigger } from 'react-bootstrap';
import LanguageSelectorpc from '../LanguageSelectorpc';

const Navbar2 = () => {
  const { auth, cart, notify, settings } = useSelector((state) => state);
  const history = useHistory();
  const { languageReducer } = useSelector(state => state);
  const { t, i18n } = useTranslation('navbar2');
  const lang = languageReducer.language || 'es';
  
  const [userRole, setUserRole] = useState(auth.user?.role);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 700);
  
  // ‚úÖ Estados MEJORADOS para PWA
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [canInstall, setCanInstall] = useState(false);
  const [isInstalling, setIsInstalling] = useState(false);
  const [showInstallAlert, setShowInstallAlert] = useState(false);
  const [installAlertMessage, setInstallAlertMessage] = useState('');
  const [isAppInstalled, setIsAppInstalled] = useState(false);
  const [showInstallButton, setShowInstallButton] = useState(true);

  // ‚úÖ Effect MEJORADO para PWA
  useEffect(() => {
    const handleBeforeInstallPrompt = (e) => {
      console.log('üì± PWA: beforeinstallprompt event captured');
      e.preventDefault();
      setDeferredPrompt(e);
      setCanInstall(true);
      
      // ‚úÖ Mostrar el bot√≥n despu√©s de un delay para mejor UX
      setTimeout(() => setShowInstallButton(true), 1000);
    };

    const handleAppInstalled = () => {
      console.log('‚úÖ PWA: App installed successfully');
      setDeferredPrompt(null);
      setCanInstall(false);
      setIsAppInstalled(true);
      setShowInstallButton(false);
      showInstallMessage(
        t('pwa_install_success') || '¬°App instalada correctamente! üéâ', 
        'success'
      );
      
      // ‚úÖ Opcional: Track installation
      if (window.gtag) {
        window.gtag('event', 'installation', {
          event_category: 'PWA',
          event_label: 'app_installed'
        });
      }
    };

    // ‚úÖ Verificar si ya est√° instalado al cargar
    const checkIfInstalled = () => {
      const isInstalled = 
        window.matchMedia('(display-mode: standalone)').matches ||
        window.navigator.standalone ||
        document.referrer.includes('android-app://') ||
        window.location.protocol === 'file:';
      
      console.log('üîç PWA: Checking if installed:', isInstalled);
      setIsAppInstalled(isInstalled);
      if (isInstalled) {
        setShowInstallButton(false);
      }
    };

    // ‚úÖ Listeners
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);
    
    // ‚úÖ Verificar instalaci√≥n
    checkIfInstalled();
    
    // ‚úÖ Verificar periodicamente (por si se desinstala)
    const interval = setInterval(checkIfInstalled, 30000);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
      clearInterval(interval);
    };
  }, [t]);

  // ‚úÖ Funci√≥n MEJORADA para mostrar mensajes
  const showInstallMessage = (message, variant = 'info') => {
    setInstallAlertMessage(message);
    setShowInstallAlert(true);
    
    // Auto-ocultar despu√©s de 4 segundos
    setTimeout(() => {
      setShowInstallAlert(false);
    }, 4000);
  };

  // ‚úÖ Funci√≥n MEJORADA de instalaci√≥n
  const handleInstallPWA = async () => {
    if (!deferredPrompt) {
      showInstallMessage(
        t('pwa_not_supported') || 'Tu navegador no soporta instalaci√≥n de apps üìµ', 
        'warning'
      );
      return;
    }

    if (isInstalling) {
      showInstallMessage(
        t('pwa_install_in_progress') || 'La instalaci√≥n ya est√° en progreso...', 
        'info'
      );
      return;
    }

    setIsInstalling(true);

    try {
      console.log('üöÄ PWA: Triggering install prompt');
      deferredPrompt.prompt();
      
      const { outcome } = await deferredPrompt.userChoice;
      
      console.log('üìä PWA: User choice:', outcome);
      
      if (outcome === 'accepted') {
        showInstallMessage(
          t('pwa_install_started') || 'üì• Instalaci√≥n iniciada...', 
          'success'
        );
        
        // ‚úÖ Track acceptance
        if (window.gtag) {
          window.gtag('event', 'installation_prompt', {
            event_category: 'PWA',
            event_label: 'accepted'
          });
        }
      } else {
        showInstallMessage(
          t('pwa_install_declined') || 'Instalaci√≥n cancelada ‚ùå', 
          'info'
        );
        
        // ‚úÖ Track rejection
        if (window.gtag) {
          window.gtag('event', 'installation_prompt', {
            event_category: 'PWA',
            event_label: 'dismissed'
          });
        }
        
        // ‚úÖ Ocultar bot√≥n temporalmente despu√©s del rechazo
        setShowInstallButton(false);
        setTimeout(() => {
          if (canInstall && !isAppInstalled) {
            setShowInstallButton(true);
          }
        }, 30000); // Reaparecer despu√©s de 30 segundos
      }
      
      setDeferredPrompt(null);
      setCanInstall(false);
      
    } catch (error) {
      console.error('‚ùå PWA: Error during installation:', error);
      showInstallMessage(
        t('pwa_install_error') || 'Error durante la instalaci√≥n üîß', 
        'danger'
      );
    } finally {
      setIsInstalling(false);
    }
  };

  // ‚úÖ Tooltip para el bot√≥n de instalaci√≥n
  const installTooltip = (props) => (
    <Tooltip id="install-tooltip" {...props}>
      {isInstalling 
        ? (t('pwa_installing') || 'Instalando...') 
        : (t('install_app') || 'Instalar App en tu dispositivo')
      }
    </Tooltip>
  );

  // ... (el resto de tus efectos y funciones se mantienen igual)

  return (
    <div>
      {/* ‚úÖ Alert MEJORADO para mensajes de instalaci√≥n */}
      {showInstallAlert && (
        <Alert 
          variant={
            installAlertMessage.includes('√©xito') || 
            installAlertMessage.includes('correctamente') ||
            installAlertMessage.includes('üéâ') ? 'success' : 
            installAlertMessage.includes('Error') || 
            installAlertMessage.includes('üîß') ? 'danger' : 
            installAlertMessage.includes('cancelada') || 
            installAlertMessage.includes('‚ùå') ? 'warning' : 'info'
          }
          className="mb-0 text-center py-2 animate__animated animate__fadeInDown"
          style={{
            position: 'fixed',
            top: '70px',
            left: '50%',
            transform: 'translateX(-50%)',
            zIndex: 9999,
            minWidth: '300px',
            borderRadius: '12px',
            boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
            border: 'none',
            fontSize: '14px',
            fontWeight: '500'
          }}
        >
          <div className="d-flex align-items-center justify-content-center">
            {installAlertMessage.includes('√©xito') && <FaCheckCircle className="me-2" />}
            {installAlertMessage.includes('Error') && <FaInfoCircle className="me-2" />}
            {installAlertMessage}
          </div>
        </Alert>
      )}

      <Navbar
        expand="lg"
        style={{
          zIndex: 1030,
          marginTop: isMobile ? '55px' : '0',
          background: settings.style
            ? 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)'
            : 'linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%)',
          padding: isMobile ? '8px 0' : '12px 0',
          boxShadow: '0 4px 25px rgba(0,0,0,0.1)',
          borderBottom: settings.style 
            ? '1px solid rgba(255,255,255,0.1)' 
            : '1px solid rgba(226, 232, 240, 0.8)'
        }}
        className={settings.style ? "navbar-dark" : "navbar-light"}
      >
        <Container fluid className="align-items-center justify-content-between">
          {/* Logo y t√≠tulo */}
          <div className="d-flex align-items-center">
            {/* ... (tu c√≥digo existente) */}
          </div>

          {/* Iconos de navegaci√≥n */}
          <div className="d-flex align-items-center" style={{ gap: isMobile ? '10px' : '18px' }}>
            {/* Selector de idioma para desktop */}
            <div className="d-none d-lg-block">
              <LanguageSelectorpc />
            </div>

            {/* ‚úÖ Bot√≥n Instalar App PWA MEJORADO */}
            {canInstall && showInstallButton && !isAppInstalled && (
              <OverlayTrigger
                placement="bottom"
                delay={{ show: 250, hide: 400 }}
                overlay={installTooltip}
              >
                <div
                  onClick={handleInstallPWA}
                  className="d-flex align-items-center justify-content-center icon-button"
                  style={{
                    cursor: isInstalling ? 'not-allowed' : 'pointer',
                    width: isMobile ? '38px' : '42px',
                    height: isMobile ? '38px' : '42px',
                    borderRadius: '14px',
                    background: isInstalling 
                      ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
                      : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    transition: 'all 0.3s ease',
                    boxShadow: isInstalling 
                      ? '0 6px 18px rgba(245, 158, 11, 0.4)'
                      : '0 6px 18px rgba(16, 185, 129, 0.4)',
                    opacity: isInstalling ? 0.8 : 1,
                    animation: isInstalling ? 'pulse 1.5s infinite' : 'none'
                  }}
                >
                  {isInstalling ? (
                    <div className="spinner-border spinner-border-sm" style={{ 
                      width: '14px', 
                      height: '14px', 
                      borderWidth: '2px',
                      color: 'white' 
                    }} />
                  ) : (
                    <FaDownload
                      size={isMobile ? 16 : 18}
                      style={{ color: 'white' }}
                    />
                  )}
                </div>
              </OverlayTrigger>
            )}

            {/* ‚úÖ Indicador de que ya est√° instalado (opcional) */}
            {isAppInstalled && (
              <OverlayTrigger
                placement="bottom"
                delay={{ show: 250, hide: 400 }}
                overlay={
                  <Tooltip id="installed-tooltip">
                    {t('pwa_already_installed') || 'App ya instalada ‚úÖ'}
                  </Tooltip>
                }
              >
                <div
                  className="d-flex align-items-center justify-content-center"
                  style={{
                    width: isMobile ? '38px' : '42px',
                    height: isMobile ? '38px' : '42px',
                    borderRadius: '14px',
                    background: 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)',
                    opacity: 0.7
                  }}
                >
                  <FaCheckCircle
                    size={isMobile ? 16 : 18}
                    style={{ color: 'white' }}
                  />
                </div>
              </OverlayTrigger>
            )}

            {/* ... (el resto de tus botones se mantienen igual) */}
          </div>
        </Container>
      </Navbar>

      {/* ‚úÖ CSS MEJORADO con animaciones */}
      <style jsx>{`
        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.05); }
          100% { transform: scale(1); }
        }

        .icon-button:hover {
          transform: translateY(-3px) scale(1.05);
          box-shadow: 0 12px 25px rgba(139, 92, 246, 0.2) !important;
        }

        .custom-menu-item:hover {
          background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(6, 182, 212, 0.1) 100%) !important;
          transform: translateX(5px);
          border-left: 3px solid #8b5cf6;
        }

        .dropdown-menu {
          border: none !important;
          box-shadow: 0 15px 50px rgba(0,0,0,0.15) !important;
          border-radius: 18px !important;
          backdrop-filter: blur(10px);
          background: rgba(255,255,255,0.95) !important;
        }
      `}</style>
    </div>
  );
};

export default Navbar2;
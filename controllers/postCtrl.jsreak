const Posts = require('../models/postModel')
const Comments = require('../models/commentModel')
const Users = require('../models/userModel')

class APIfeatures {
    constructor(query, queryString){
        this.query = query;
        this.queryString = queryString;
    }

    paginating(){
        const page = this.queryString.page * 1 || 1
        const limit = this.queryString.limit * 1 || 9
        const skip = (page - 1) * limit
        this.query = this.query.skip(skip).limit(limit)
        return this;
    }
}

const postCtrl = {
    createPost: async (req, res) => {
        try {
            // Desestructurar TODOS los campos nuevos
            const { 
                content, title, link, price, priceType, offerType, features, images,
                // Nuevos campos
                category, subCategory, description, wilaya, commune, contacto,
                itemsReservations_Visa, Location_Vacances, alquilergeneral,
                superficie, etage, promoteurimmobilier, specifications,
                adress, nombredelhotel, adresshotel, totalhabitaciones,
                tipodehabutaciones, estrellas, wifi, language, tarifnuit,
                reservacionenlinea, politiqueAnnulation, hotelWebsite, horariollegada,
                horadudepar, datedepar, duracionviaje, transporte,
                destinacionvoyage1, voyage1hotel1, voyage1nombrehotel1,
                destinacionvoyage2, voyage2hotel2, voyage1nombrehotel2,
                fecharegreso, serviciosdelhotel, incluidoenelprecio,
                cancelarreserva, destinacionhadj
            } = req.body

            if(images.length === 0) {
                return res.status(400).json({msg: "Veuillez ajouter au moins une photo."})
            }

            // Validación de campos requeridos
            if (!subCategory) {
                return res.status(400).json({msg: "La catégorie est requise."})
            }

            if (!wilaya || !commune) {
                return res.status(400).json({msg: "La wilaya et la commune sont requises."})
            }

            // Crear nuevo post con TODOS los campos
            const newPost = new Posts({
                // Campos existentes
                content, title, link, price, priceType, offerType, features, images,
                
                // ✅ Nuevos campos
                category: category || "Agence de Voyage",
                subCategory,
                description: description || content, // Fallback a content si no hay description
                wilaya,
                commune, 
                contacto,
                itemsReservations_Visa,
                Location_Vacances,
                alquilergeneral,
                superficie,
                etage,
                promoteurimmobilier: promoteurimmobilier || false,
                specifications: specifications || [],
                adress,
                nombredelhotel,
                adresshotel,
                totalhabitaciones,
                tipodehabutaciones: tipodehabutaciones || [],
                estrellas,
                wifi: wifi || [],
                language: language || [],
                tarifnuit,
                reservacionenlinea,
                politiqueAnnulation,
                hotelWebsite,
                horariollegada,
                horadudepar,
                datedepar,
                duracionviaje,
                transporte,
                destinacionvoyage1,
                voyage1hotel1,
                voyage1nombrehotel1,
                destinacionvoyage2,
                voyage2hotel2,
                voyage1nombrehotel2,
                fecharegreso,
                serviciosdelhotel,
                incluidoenelprecio,
                cancelarreserva,
                destinacionhadj,
                
                user: req.user._id
            })

            await newPost.save()

            res.json({
                msg: 'Post créé avec succès!',
                newPost: {
                    ...newPost._doc,
                    user: req.user
                }
            })
        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },

    // ✅ UPDATE POST ACTUALIZADO
    updatePost: async (req, res) => {
        try {
            // Desestructurar TODOS los campos
            const { 
                content, title, link, price, priceType, offerType, features, images,
                // Nuevos campos
                category, subCategory, description, wilaya, commune, contacto,
                itemsReservations_Visa, Location_Vacances, alquilergeneral,
                superficie, etage, promoteurimmobilier, specifications,
                adress, nombredelhotel, adresshotel, totalhabitaciones,
                tipodehabutaciones, estrellas, wifi, language, tarifnuit,
                reservacionenlinea, politiqueAnnulation, hotelWebsite, horariollegada,
                horadudepar, datedepar, duracionviaje, transporte,
                destinacionvoyage1, voyage1hotel1, voyage1nombrehotel1,
                destinacionvoyage2, voyage2hotel2, voyage1nombrehotel2,
                fecharegreso, serviciosdelhotel, incluidoenelprecio,
                cancelarreserva, destinacionhadj
            } = req.body

            const updateData = {
                // Campos existentes
                content, title, link, price, priceType, offerType, features, images,
                
                // ✅ Nuevos campos
                category,
                subCategory,
                description: description || content,
                wilaya,
                commune,
                contacto,
                itemsReservations_Visa,
                Location_Vacances,
                alquilergeneral,
                superficie,
                etage,
                promoteurimmobilier,
                specifications,
                adress,
                nombredelhotel,
                adresshotel,
                totalhabitaciones,
                tipodehabutaciones,
                estrellas,
                wifi,
                language,
                tarifnuit,
                reservacionenlinea,
                politiqueAnnulation,
                hotelWebsite,
                horariollegada,
                horadudepar,
                datedepar,
                duracionviaje,
                transporte,
                destinacionvoyage1,
                voyage1hotel1,
                voyage1nombrehotel1,
                destinacionvoyage2,
                voyage2hotel2,
                voyage1nombrehotel2,
                fecharegreso,
                serviciosdelhotel,
                incluidoenelprecio,
                cancelarreserva,
                destinacionhadj
            }

            // Filtrar campos undefined
            Object.keys(updateData).forEach(key => {
                if (updateData[key] === undefined) {
                    delete updateData[key]
                }
            })

            const post = await Posts.findOneAndUpdate(
                { _id: req.params.id }, 
                updateData,
                { new: true } // Retornar el documento actualizado
            ).populate("user likes", "avatar username fullname")
            .populate({
                path: "comments",
                populate: {
                    path: "user likes",
                    select: "-password"
                }
            })

            if (!post) {
                return res.status(404).json({msg: "Post non trouvé."})
            }

            res.json({
                msg: "Post mis à jour avec succès!",
                newPost: post
            })
        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },


    getPosts: async (req, res) => {
        try {
            const features =  new APIfeatures(Posts.find({}), req.query).paginating()

            const posts = await features.query.sort('-createdAt')
            .populate("user likes", "avatar username fullname followers")
            .populate({
                path: "comments",
                populate: {
                    path: "user likes",
                    select: "-password"
                }
            })

            res.json({
                msg: 'Success!',
                result: posts.length,
                posts
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    
    likePost: async (req, res) => {
        try {
            const post = await Posts.find({_id: req.params.id, likes: req.user._id})
            if(post.length > 0) return res.status(400).json({msg: "You liked this post."})

            const like = await Posts.findOneAndUpdate({_id: req.params.id}, {
                $push: {likes: req.user._id}
            }, {new: true})

            if(!like) return res.status(400).json({msg: 'This post does not exist.'})

            res.json({msg: 'Liked Post!'})

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    unLikePost: async (req, res) => {
        try {

            const like = await Posts.findOneAndUpdate({_id: req.params.id}, {
                $pull: {likes: req.user._id}
            }, {new: true})

            if(!like) return res.status(400).json({msg: 'This post does not exist.'})

            res.json({msg: 'UnLiked Post!'})

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    getUserPosts: async (req, res) => {
        try {
            const features = new APIfeatures(Posts.find({user: req.params.id}), req.query)
            .paginating()
            const posts = await features.query.sort("-createdAt")

            res.json({
                posts,
                result: posts.length
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    getPost: async (req, res) => {
        try {
            const post = await Posts.findById(req.params.id)
            .populate("user likes", "avatar username fullname followers")
            .populate({
                path: "comments",
                populate: {
                    path: "user likes",
                    select: "-password"
                }
            })

            if(!post) return res.status(400).json({msg: 'This post does not exist.'})

            res.json({
                post
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    getPostsDicover: async (req, res) => {
        try {

            const newArr = [...req.user.following, req.user._id]

            const num  = req.query.num || 9

            const posts = await Posts.aggregate([
                { $match: { user : { $nin: newArr } } },
                { $sample: { size: Number(num) } },
            ])

            return res.json({
                msg: 'Success!',
                result: posts.length,
                posts
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    deletePost: async (req, res) => {
        try {
            const post = await Posts.findOneAndDelete({_id: req.params.id, user: req.user._id})
            await Comments.deleteMany({_id: {$in: post.comments }})

            res.json({
                msg: 'Deleted Post!',
                newPost: {
                    ...post,
                    user: req.user
                }
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    savePost: async (req, res) => {
        try {
            const user = await Users.find({_id: req.user._id, saved: req.params.id})
            if(user.length > 0) return res.status(400).json({msg: "You saved this post."})

            const save = await Users.findOneAndUpdate({_id: req.user._id}, {
                $push: {saved: req.params.id}
            }, {new: true})

            if(!save) return res.status(400).json({msg: 'This user does not exist.'})

            res.json({msg: 'Saved Post!'})

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    unSavePost: async (req, res) => {
        try {
            const save = await Users.findOneAndUpdate({_id: req.user._id}, {
                $pull: {saved: req.params.id}
            }, {new: true})

            if(!save) return res.status(400).json({msg: 'This user does not exist.'})

            res.json({msg: 'unSaved Post!'})

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
    getSavePosts: async (req, res) => {
        try {
            const features = new APIfeatures(Posts.find({
                _id: {$in: req.user.saved}
            }), req.query).paginating()

            const savePosts = await features.query.sort("-createdAt")

            res.json({
                savePosts,
                result: savePosts.length
            })

        } catch (err) {
            return res.status(500).json({msg: err.message})
        }
    },
}

module.exports = postCtrl